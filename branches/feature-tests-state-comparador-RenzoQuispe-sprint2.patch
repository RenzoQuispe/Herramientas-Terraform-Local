From 3fa63894b0dfb2fe70713c79f7c462c107500f25 Mon Sep 17 00:00:00 2001
From: RenzoQuispe <renzo123cd@gmail.com>
Date: Sun, 29 Jun 2025 15:13:06 -0500
Subject: [PATCH 4/5] =?UTF-8?q?test(py):=20agregar=20pruebas=20unitarias?=
 =?UTF-8?q?=20para=20la=20l=C3=B3gica=20de=20comparaci=C3=B3n=20de=20estad?=
 =?UTF-8?q?o=20de=20state=5Fcomparador.py?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 tests/test_state_comparador.py | 139 +++++++++++++++++++++++++++++++++
 1 file changed, 139 insertions(+)
 create mode 100644 tests/test_state_comparador.py

diff --git a/tests/test_state_comparador.py b/tests/test_state_comparador.py
new file mode 100644
index 0000000..5046470
--- /dev/null
+++ b/tests/test_state_comparador.py
@@ -0,0 +1,139 @@
+import sys
+import os
+sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
+from scripts.state_comparador import comparar, cargar_tfstate, obtener_estado_deseado, obtener_estado_real, NOMBRE_DEPLOYMENT, NOMBRE_SERVICE
+import json
+import pytest
+from unittest.mock import patch, Mock
+# tests para "comparar" de state_comparador
+@pytest.mark.parametrize(
+    "estado_deseado, estado_real, resultado_drift_esperado",
+    [
+        # caso sin drift
+        (
+            {
+                "deployment": {
+                    "replicas": 3,
+                    "image": "nginx:1.25",
+                    "container_port": 80,
+                    "container_name": "web-contenedor"
+                },
+                "service": {
+                    "port": 80,
+                    "target_port": 80,
+                    "type": "ClusterIP"
+                }
+            },
+            {
+                "deployment": {
+                    "replicas": 3,
+                    "image": "nginx:1.25",
+                    "container_port": 80,
+                    "container_name": "web-contenedor"
+                },
+                "service": {
+                    "port": 80,
+                    "target_port": 80,
+                    "type": "ClusterIP"
+                }
+            },
+            False
+        ),
+
+        # drift solo en replicas
+        (
+            {
+                "deployment": {
+                    "replicas": 4,
+                    "image": "nginx:1.25",
+                    "container_port": 80,
+                    "container_name": "web-contenedor"
+                },
+                "service": {
+                    "port": 80,
+                    "target_port": 80,
+                    "type": "ClusterIP"
+                }
+            },
+            {
+                "deployment": {
+                    "replicas": 3,
+                    "image": "nginx:1.25",
+                    "container_port": 80,
+                    "container_name": "web-contenedor"
+                },
+                "service": {
+                    "port": 80,
+                    "target_port": 80,
+                    "type": "ClusterIP"
+                }
+            },
+            True
+        ),
+
+        # drift en service port
+        (
+            {
+                "deployment": {
+                    "replicas": 3,
+                    "image": "nginx:1.25",
+                    "container_port": 80,
+                    "container_name": "web-contenedor"
+                },
+                "service": {
+                    "port": 8080,
+                    "target_port": 80,
+                    "type": "ClusterIP"
+                }
+            },
+            {
+                "deployment": {
+                    "replicas": 3,
+                    "image": "nginx:1.25",
+                    "container_port": 80,
+                    "container_name": "web-contenedor"
+                },
+                "service": {
+                    "port": 80,
+                    "target_port": 80,
+                    "type": "ClusterIP"
+                }
+            },
+            True
+        ),
+
+        # drift en varios atributos
+        (
+            {
+                "deployment": {
+                    "replicas": 5,
+                    "image": "nginx:1.26",
+                    "container_port": 8080,
+                    "container_name": "web-contenedor-2"
+                },
+                "service": {
+                    "port": 8080,
+                    "target_port": 8080,
+                    "type": "LoadBalancer"
+                }
+            },
+            {
+                "deployment": {
+                    "replicas": 3,
+                    "image": "nginx:1.25",
+                    "container_port": 80,
+                    "container_name": "web-contenedor"
+                },
+                "service": {
+                    "port": 80,
+                    "target_port": 80,
+                    "type": "ClusterIP"
+                }
+            },
+            True
+        )
+    ]
+)
+def test_comparar(estado_deseado, estado_real, resultado_drift_esperado):
+    drift = comparar(estado_deseado, estado_real)
+    assert drift == resultado_drift_esperado
-- 
2.47.2


From 0adfbf67078cf2668baf20dce2d8b1b141a7c97e Mon Sep 17 00:00:00 2001
From: RenzoQuispe <renzo123cd@gmail.com>
Date: Sun, 29 Jun 2025 16:10:52 -0500
Subject: [PATCH 5/5] test(py): actualizar test_ state_comparador.py con test
 de las funciones  cargar_tfstate, obtener_estado_deseado, y
 obtener_estado_real

---
 tests/test_state_comparador.py | 126 +++++++++++++++++++++++++++++++++
 1 file changed, 126 insertions(+)

diff --git a/tests/test_state_comparador.py b/tests/test_state_comparador.py
index 5046470..02a57f5 100644
--- a/tests/test_state_comparador.py
+++ b/tests/test_state_comparador.py
@@ -137,3 +137,129 @@ from unittest.mock import patch, Mock
 def test_comparar(estado_deseado, estado_real, resultado_drift_esperado):
     drift = comparar(estado_deseado, estado_real)
     assert drift == resultado_drift_esperado
+    
+# tests para "cargar_tfstate"
+def test_cargar_tfstate(tmp_path):
+    contenido = {
+        "version": 4,
+        "terraform_version": "1.6.3",
+        "serial": 45,
+        "lineage": "4555872b-7f57-ed73-f8c0-8b25d19915d6",
+        "outputs": {},
+        "resources": [],
+        "check_results": {}
+    }
+    archivo = tmp_path / "terraform.tfstate"
+    archivo.write_text(json.dumps(contenido))
+    estado = cargar_tfstate(str(archivo))
+    assert estado == contenido
+def test_cargar_tfstate_error():
+    with pytest.raises(IOError):
+        cargar_tfstate("no_existe.tfstate")
+# tests para "obtener_estado_deseado"
+def test_obtener_estado_deseado():
+    tfstate = {
+        "resources": [
+            {
+                "type": "kubernetes_deployment",
+                "instances": [
+                    {
+                        "attributes": {
+                            "spec": [
+                                {
+                                    "replicas": 3,
+                                    "template": [
+                                        {
+                                            "spec": [
+                                                {
+                                                    "container": [
+                                                        {
+                                                            "image": "nginx:1.25",
+                                                            "port": [{"container_port": 80}],
+                                                            "name": "web-contenedor"
+                                                        }
+                                                    ]
+                                                }
+                                            ]
+                                        }
+                                    ]
+                                }
+                            ],
+                            "metadata": [{"name": "nginx-deployment"}]
+                        }
+                    }
+                ]
+            },
+            {
+                "type": "kubernetes_service",
+                "instances": [
+                    {
+                        "attributes": {
+                            "spec": [
+                                {
+                                    "port": [{"port": 80, "target_port": 80}],
+                                    "type": "ClusterIP"
+                                }
+                            ],
+                            "metadata": [{"name": "miapp-service"}]
+                        }
+                    }
+                ]
+            }
+        ]
+    }
+    estado = obtener_estado_deseado(tfstate)
+    assert estado["deployment"]["replicas"] == 3
+    assert estado["deployment"]["image"] == "nginx:1.25"
+    assert estado["deployment"]["container_port"] == 80
+    assert estado["deployment"]["container_name"] == "web-contenedor"
+    assert estado["service"]["port"] == 80
+    assert estado["service"]["target_port"] == 80
+    assert estado["service"]["type"] == "ClusterIP"
+
+# test para "obtener_estado_real"
+@patch("scripts.state_comparador.subprocess.run")
+def test_obtener_estado_real(mock_test):
+    global NOMBRE_DEPLOYMENT, NOMBRE_SERVICE
+    NOMBRE_DEPLOYMENT = "nginx-deployment"
+    NOMBRE_SERVICE = "miapp-service"
+
+    deploy_mock = {
+        "spec": {
+            "replicas": 3,
+            "template": {
+                "spec": {
+                    "containers": [
+                        {
+                            "image": "nginx:1.25",
+                            "ports": [{"containerPort": 80}],
+                            "name": "web-contenedor"
+                        }
+                    ]
+                }
+            }
+        }
+    }
+
+    service_mock = {
+        "spec": {
+            "ports": [{"port": 80, "targetPort": 80}],
+            "type": "ClusterIP"
+        }
+    }
+
+    # mock kubectl get deployment
+    mock_test.side_effect = [
+        Mock(stdout=json.dumps(deploy_mock)),
+        Mock(stdout=json.dumps(service_mock))
+    ]
+
+    estado = obtener_estado_real()
+    assert estado["deployment"]["replicas"] == 3
+    assert estado["deployment"]["image"] == "nginx:1.25"
+    assert estado["deployment"]["container_port"] == 80
+    assert estado["deployment"]["container_name"] == "web-contenedor"
+
+    assert estado["service"]["port"] == 80
+    assert estado["service"]["target_port"] == 80
+    assert estado["service"]["type"] == "ClusterIP"
-- 
2.47.2

